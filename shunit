#! /usr/bin/env bash

test_folder=$1
target_folder="$(pwd)/test-reports"
[[ -d "$target_folder" ]] && rm -rf "$target_folder"
mkdir -p "$target_folder"
test_logfile="$target_folder/test.log"
echo "" >> "$test_logfile"

####################
#### Statistics ####
####################

OPEN='open'
CLOSE='close'
BEGIN='start'
END='end'
ASSERT='assert'
ERROR='error'
SUMMARY='summary'

function log_event() {
  echo -e "${1}|${2}|$(date +'%s')" >> "$test_logfile"
}

function print_results() {
  while read line; do
    echo "$line"
  done < "$test_logfile"
}

function start_printer() {
  tail -f "$test_logfile"
}

function stop_printer() {
  # todo make this not static
  kill %1
}

#################
#### Asserts ####
#################

function assert_equals() { # assert that $1 is equal to $2
  if [[ "$1" -eq "$2" ]]; then
    log_event "$ASSERT" "s|Success"
  else
    log_event "$ASSERT" "f|Expected $1 but got $2"
  fi
}

function assert_none_empty() { # assert that $1 is not empty or only spaces
  if [[ -z "${1// }" ]]; then
    log_event "$ASSERT" "s|Success"
  else
    log_event "$ASSERT" "f|Value was empty, when expecting nonEmpty"
  fi
}


function assert_is_substring_of() { # assert that $1 is a substring of $2
  if [[ "$2" =~ $1 ]]; then
    log_event "$ASSERT" "s|Success"
  else
    log_event "$ASSERT" "f|'$1' was not a substring of '$2'"
 fi
}

######################
#### Test Running ####
######################

function execute_function() {
    message=$($1 2>&1)
    status=$?

    if [[ "$status" -gt 0 ]]; then
      log_event "$ERROR" "${message}|${status}"
    fi
}

function check_file() {
  # todo sanitycheck the file
  local test_file=$1
  . "$test_file"

  log_event "$OPEN" "$test_file"

  # Run setup function if defined
  grep -q '^function setup()' "$test_file" && execute_function "setup"

  sed -n 's/^function \(check_.*\)().*/\1/p' "$test_file" | while IFS= read -r test_name; do
    log_event "$BEGIN" "$test_name"
    execute_function "$test_name"
    log_event "$END" "$test_name"
  done

  # Run cleanup if defined
  grep -q '^function cleanup()' "$test_file" && execute_function "cleanup"

  log_event "$CLOSE" "$test_file"
}

function run_tests() {
  # generate a summary
  # create a rapport
  start_printer &
  while IFS= read -r -d '' file; do
    (check_file "$file")
  done < <(find "$test_folder" -type f \( -name '*.bash' -or -name '*.sh' \) -print0)
  stop_printer
}

#######################
#### Main handling ####
#######################

run_tests
